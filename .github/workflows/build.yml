name: Build Executables

on:
  push:
    branches: [release]

jobs:
  build:
    name: Build executables (Nuitka)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v4
      with:
        python-version: '3.12.6'

    - name: Install patchelf (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y patchelf

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install "nuitka[full]"

    - name: Build executable with Nuitka
      shell: bash
      env:
        SRC: PALMS.py
        DATA: resources=resources
      run: |
        COMMON="--enable-plugin=pyqt6 --enable-plugin=matplotlib \
                --include-data-dir=${DATA} \
                --output-filename=PALMS"
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          python -m nuitka $COMMON --standalone --macos-app-icon=resources/palms.icns --output-dir=build "$SRC"
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          python -m nuitka $COMMON --onefile --windows-icon-from-ico=resources/palms.ico --output-dir=build "$SRC"
        else
          python -m nuitka $COMMON --onefile --output-dir=build "$SRC"
        fi

    - name: Prepare release directory
      run: mkdir -p release

    - name: Archive Linux binary
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x build/PALMS.bin
        tar -czf release_linux.tar.gz Experiments -C build PALMS.bin

    - name: Archive Windows binary
      if: matrix.os == 'windows-latest'
      run: |
        7z a -tzip release_windows.zip build/PALMS.exe
        7z a -tzip release_windows.zip Experiments

    - name: Archive macOS bundle
      if: matrix.os == 'macos-latest'
      run: |
        tar -czf release_macos.tar.gz Experiments -C build PALMS.dist

    - name: Commit latest tag
      if: github.ref == 'refs/heads/release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -f latest
        git push origin latest --force

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-release
        path: release_*

    - uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        files: release_*

    - if: failure()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        files: release_*

    - if: failure()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        files: release_*

