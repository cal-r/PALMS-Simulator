name: Build Executables

on:
  push:
    branches: [release]

jobs:
  build:
    name: Build executables
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
          - os: windows-latest
            target: windows
          - os: macos-13
            target: macos-intel
          - os: macos-latest
            target: macos-silicon

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v4
      with:
        python-version: '3.12.6'
        cache: 'pip'

    - name: Install build dependencies (Linux)
      if: matrix.target == 'linux'
      run: sudo apt-get update && sudo apt-get install -y patchelf

    - name: Install Python deps
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pyside6 matplotlib seaborn pillow

    # Build steps per platform
    - name: Build Linux executable
      if: matrix.target == 'linux'
      run: |
        pyinstaller PALMS.py \
          --noconfirm \
          --onefile \
          --windowed \
          --icon=resources/palms.png \
          --add-data "resources:resources" \
          --strip

    - name: Build Windows executable
      if: matrix.target == 'windows'
      run: |
        pyinstaller PALMS.py ^
          --noconfirm ^
          --onefile ^
          --windowed ^
          --icon=resources/palms.ico ^
          --add-data "resources;resources" ^
          --strip
      shell: cmd

    - name: Build macOS Intel app
      if: matrix.target == 'macos-intel'
      run: |
        pyinstaller PALMS.py \
          --noconfirm \
          --onedir \
          --windowed \
          --icon=resources/palms.icns \
          --add-data "resources:resources" \
          --strip

    - name: Build macOS Silicon app
      if: matrix.target == 'macos-silicon'
      run: |
        pyinstaller PALMS.py \
          --noconfirm \
          --onedir \
          --windowed \
          --icon=resources/palms.icns \
          --add-data "resources:resources" \
          --strip

    # Mac app self-signing (for both mac targets)
    - name: Ad-hoc self-sign macOS app bundle
      if: startsWith(matrix.target, 'macos-')
      run: |
        chmod +x dist/PALMS.app/Contents/MacOS/PALMS
        codesign --deep --force --options runtime --deep --sign - dist/PALMS.app

    - name: Prepare release dir
      run: mkdir -p release

    # Archiving steps per platform
    - name: Archive Linux binary
      if: matrix.target == 'linux'
      run: |
        chmod +x dist/PALMS
        tar -czf release/palms-linux.tar.gz Experiments -C dist PALMS

    - name: Archive Windows binary
      if: matrix.target == 'windows'
      run: |
        7z a -tzip release/palms-windows.zip dist/PALMS.exe
        7z a -tzip release/palms-windows.zip Experiments

    - name: Archive macOS Intel app
      if: matrix.target == 'macos-intel'
      run: |
        chmod +x dist/PALMS.app/Contents/MacOS/PALMS
        tar --no-xattrs -czf release/palms-macos-intel.tar.gz Experiments -C dist PALMS.app

    - name: Archive macOS Silicon app
      if: matrix.target == 'macos-silicon'
      run: |
        chmod +x dist/PALMS.app/Contents/MacOS/PALMS
        tar --no-xattrs -czf release/palms-macos-silicon.tar.gz Experiments -C dist PALMS.app

    # Tagging and release (runs only once per workflow)
    - name: Commit latest tag
      if: github.ref == 'refs/heads/release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -f latest
        git push origin latest --force

    - uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        files: release/*

