name: Build and Test MacOS Executable

on:
  push:
    branches:
      - release
      - release-test

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-and-build
        with:
          os: macos-latest
          artifact-name: macos-latest-release

  test-macos:
    name: Test macOS Executable
    runs-on: macos-latest
    needs: build-macos
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-release
          path: release/

      - name: Extract .tar.gz
        shell: bash
        run: |
          mkdir -p dist
          tar -xzf release/release_macos.tar.gz -C dist

      - name: Make app executable
        shell: bash
        run: chmod +x dist/PALMS.app/Contents/MacOS/PALMS

      - name: Run app, screenshot, and check for errors
        shell: bash
        run: |
          set -euxo pipefail

          mkdir -p logs screenshots

          # Start the app, capture output in background
          #
          echo "Start time: $(date '+%Y-%m-%d %H:%M:%S.%3N')"
          dist/PALMS.app/Contents/MacOS/PALMS --smoke-test > logs/stdout.log 2> logs/stderr.log
          APP_PID=$!
          APP_EXIT_CODE=$?
          echo "End time: $(date '+%Y-%m-%d %H:%M:%S.%3N')"

          # # Screenshot while app is running
          # screencapture -x screenshots/gui.png

          # # Check if app is still running (optional, but useful)
          # if ! ps -p $APP_PID > /dev/null; then
          #   echo "App is not running as expected" >&2
          #   exit 1
          # fi

          # # Kill the app (clean up)
          # kill $APP_PID || true

          # # Wait for app to finish and capture exit code
          # wait $APP_PID

          echo "App exited with code $APP_EXIT_CODE" >> logs/stdout.log

          echo "Stdout:"
          cat logs/stdout.log

          echo "Stderr:"
          cat logs/stderr.log

          if [ $APP_EXIT_CODE -ne 0 ]; then
            echo "App exited with error code $APP_EXIT_CODE"
            cat logs/stdout.log || true
            cat logs/stderr.log || true
            exit 1
          fi

          # Check for stderr output
          if [ -s logs/stderr.log ]; then
            echo "Error: stderr is not empty!"
            cat logs/stderr.log || true
            exit 1
          fi

          # Check for crash logs in last 10 minutes
          mkdir -p logs/crash_reports
          NEW_CRASH=$(find ~/Library/Logs/DiagnosticReports -name "*.crash" -type f -newermt "-10 minutes" || true)
          if [ ! -z "$NEW_CRASH" ]; then
            echo "Crash log(s) found!"
            cp $NEW_CRASH logs/crash_reports/
            ls -l $NEW_CRASH
            cat $NEW_CRASH
            exit 1
          fi

      - name: Log running processes
        shell: bash
        run: osascript -e 'tell application "System Events" to get name of processes' > logs/process_list.log

      - name: Upload logs and screenshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-gui-test-artifacts
          path: |
            logs
            screenshots/gui.png
